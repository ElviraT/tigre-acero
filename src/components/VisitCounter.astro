---
// Este componente muestra un contador de visitas simple
---

<div id="visit-counter" class="fixed bottom-4 right-4 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-lg p-3 text-sm text-gray-700 dark:text-gray-200 z-50 border border-gray-200 dark:border-gray-700">
  <div class="flex items-center space-x-2">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
    </svg>
    <span id="visit-count" class="font-medium">Cargando visitas...</span>
  </div>
</div>

<script>
// Verificar si estamos en el navegador
if (typeof window !== 'undefined') {
  // Función para formatear el número de visitas
  function formatVisitCount(count) {
    return `${count} visitas hoy`;
  }

  // Función para actualizar el contador en el servidor
  async function updateVisitCounter() {
    try {
      // Mostrar estado de carga
      const counterElement = document.getElementById('visit-count');
      counterElement.textContent = 'Actualizando...';
      
      // Intentar con Netlify Functions primero
      let response = await fetch('/.netlify/functions/visits', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      
      // Si falla, intentar con la ruta de API directa
      if (!response.ok) {
        console.log('Usando ruta alternativa...');
        response = await fetch('/api/visits', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
        });
      }
      
      if (!response.ok) throw new Error('Error al registrar la visita');
      
      const data = await response.json();
      counterElement.textContent = formatVisitCount(data.count);
      
      // Guardar en localStorage para referencia rápida
      localStorage.setItem('lastVisitCount', data.count);
      localStorage.setItem('lastVisitDate', data.lastReset || new Date().toDateString());
      
      console.log('Contador actualizado:', data);
      
    } catch (error) {
      console.error('Error al actualizar visitas:', error);
      // Mostrar el último contador guardado si está disponible
      const lastCount = localStorage.getItem('lastVisitCount');
      const lastDate = localStorage.getItem('lastVisitDate');
      
      const counterElement = document.getElementById('visit-count');
      if (lastCount && lastDate === new Date().toDateString()) {
        counterElement.textContent = formatVisitCount(lastCount);
      } else {
        counterElement.textContent = 'Error al cargar';
      }
    }
  }
  
  // Función para obtener solo el contador sin registrar una nueva visita
  async function getVisitCount() {
    try {
      // Mostrar el contador guardado mientras se carga el actual
      const lastCount = localStorage.getItem('lastVisitCount');
      const lastDate = localStorage.getItem('lastVisitDate');
      
      const counterElement = document.getElementById('visit-count');
      
      if (lastCount && lastDate === new Date().toDateString()) {
        counterElement.textContent = formatVisitCount(lastCount);
      } else {
        counterElement.textContent = 'Cargando...';
      }
      
      // Intentar con Netlify Functions primero
      let response = await fetch('/.netlify/functions/visits');
      
      // Si falla, intentar con la ruta de API directa
      if (!response.ok) {
        console.log('Usando ruta alternativa...');
        response = await fetch('/api/visits');
      }
      
      if (!response.ok) throw new Error('Error al obtener las visitas');
      
      const data = await response.json();
      counterElement.textContent = formatVisitCount(data.count);
      
      // Actualizar localStorage
      localStorage.setItem('lastVisitCount', data.count);
      localStorage.setItem('lastVisitDate', data.lastReset || new Date().toDateString());
      
    } catch (error) {
      console.error('Error al obtener visitas:', error);
      // Mostrar el último contador guardado si está disponible
      const lastCount = localStorage.getItem('lastVisitCount');
      const lastDate = localStorage.getItem('lastVisitDate');
      
      const counterElement = document.getElementById('visit-count');
      if (lastCount && lastDate === new Date().toDateString()) {
        counterElement.textContent = formatVisitCount(lastCount);
      } else {
        counterElement.textContent = 'Error al cargar';
      }
    }
  }
  
  // Inicializar el contador cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    // Usar sessionStorage para evitar múltiples conteos en la misma sesión
    if (!sessionStorage.getItem('visitCounted')) {
      // Marcar como contado y actualizar el contador
      sessionStorage.setItem('visitCounted', 'true');
      updateVisitCounter();
    } else {
      // Si no, solo obtener el contador actual
      getVisitCount();
    }
    
    // Actualizar el contador cada 2 minutos para mantenerlo sincronizado
    setInterval(getVisitCount, 2 * 60 * 1000);
  });
}
</script>

<style>
/* Estilos responsivos */
#visit-counter {
  transition: all 0.3s ease;
}

#visit-counter:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

@media (max-width: 640px) {
  #visit-counter {
    right: 0.75rem;
    bottom: 0.75rem;
    font-size: 0.75rem;
    padding: 0.5rem 0.75rem;
  }
}
</style>
