---
// Este componente muestra un contador de visitas simple
---

<div id="visit-counter" class="fixed bottom-4 right-4 bg-white dark:bg-gray-800 text-gray-800 dark:text-white px-4 py-2 rounded-lg shadow-lg text-sm font-medium z-50">
  Cargando visitas...
</div>

<script>
// Verificar si estamos en el navegador
if (typeof window !== 'undefined') {
  // Función para formatear el número de visitas
  function formatVisitCount(count) {
    return `Visitas hoy: ${count}`;
  }

  // Función para actualizar el contador en el servidor
  async function updateVisitCounter() {
    try {
      // Intentar con Netlify Functions primero
      let response = await fetch('/.netlify/functions/visits', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
      });
      
      // Si falla, intentar con la ruta de API directa
      if (!response.ok) {
        console.log('Usando ruta alternativa...');
        response = await fetch('/api/visits', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
        });
      }
      
      if (!response.ok) throw new Error('Error al registrar la visita');
      
      const data = await response.json();
      document.getElementById('visit-counter').textContent = formatVisitCount(data.count);
      
      // Guardar en localStorage para referencia rápida
      localStorage.setItem('lastVisitCount', data.count);
      localStorage.setItem('lastVisitDate', new Date().toDateString());
      
    } catch (error) {
      console.error('Error al actualizar visitas:', error);
      // Mostrar el último contador guardado si está disponible
      const lastCount = localStorage.getItem('lastVisitCount');
      const lastDate = localStorage.getItem('lastVisitDate');
      
      if (lastCount && lastDate === new Date().toDateString()) {
        document.getElementById('visit-counter').textContent = formatVisitCount(lastCount);
      } else {
        document.getElementById('visit-counter').textContent = 'Visitas: Error';
      }
    }
  }
  
  // Función para obtener solo el contador sin registrar una nueva visita
  async function getVisitCount() {
    try {
      // Mostrar el contador guardado mientras se carga el actual
      const lastCount = localStorage.getItem('lastVisitCount');
      const lastDate = localStorage.getItem('lastVisitDate');
      
      if (lastCount && lastDate === new Date().toDateString()) {
        document.getElementById('visit-counter').textContent = formatVisitCount(lastCount);
      }
      
      // Intentar con Netlify Functions primero
      let response = await fetch('/.netlify/functions/visits');
      
      // Si falla, intentar con la ruta de API directa
      if (!response.ok) {
        console.log('Usando ruta alternativa...');
        response = await fetch('/api/visits');
      }
      
      if (!response.ok) throw new Error('Error al obtener las visitas');
      
      const data = await response.json();
      document.getElementById('visit-counter').textContent = formatVisitCount(data.count);
      
      // Actualizar localStorage
      localStorage.setItem('lastVisitCount', data.count);
      localStorage.setItem('lastVisitDate', new Date().toDateString());
      
    } catch (error) {
      console.error('Error al obtener visitas:', error);
      // Mostrar el último contador guardado si está disponible
      const lastCount = localStorage.getItem('lastVisitCount');
      const lastDate = localStorage.getItem('lastVisitDate');
      
      if (lastCount && lastDate === new Date().toDateString()) {
        document.getElementById('visit-counter').textContent = formatVisitCount(lastCount);
      } else {
        document.getElementById('visit-counter').textContent = 'Visitas: Error';
      }
    }
  }
  
  // Inicializar el contador cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    // Usar sessionStorage para evitar múltiples conteos en la misma sesión
    if (!sessionStorage.getItem('visitCounted')) {
      // Marcar como contado y actualizar el contador
      sessionStorage.setItem('visitCounted', 'true');
      updateVisitCounter();
    } else {
      // Si no, solo obtener el contador actual
      getVisitCount();
    }
    
    // Actualizar el contador cada 5 minutos para mantenerlo sincronizado
    setInterval(getVisitCount, 5 * 60 * 1000);
  });
}
</script>

<style>
/* Estilos responsivos */
@media (max-width: 640px) {
  #visit-counter {
    right: 0.5rem;
    bottom: 0.5rem;
    font-size: 0.75rem;
    padding: 0.5rem;
  }
}
</style>
