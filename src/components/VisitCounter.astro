---
// Este componente muestra un contador de visitas simple
// No requiere props ya que funciona de forma independiente
---

<div id="visit-counter" class="fixed bottom-4 right-4 bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-lg shadow-lg p-3 text-sm text-gray-700 dark:text-gray-200 z-50 border border-gray-200 dark:border-gray-700">
  <div class="flex items-center space-x-2">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
    </svg>
    <span id="visit-count" class="font-medium">Cargando visitas...</span>
  </div>
</div>

<script>
// Verificar si el navegador soporta fetch
if (typeof window !== 'undefined') {
  // Función para actualizar el contador en el servidor
  async function updateVisitCounter() {
    try {
      // Primero registramos la visita
      const response = await fetch('/.netlify/functions/visits', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (!response.ok) throw new Error('Error al registrar la visita');
      
      // Luego obtenemos el contador actualizado
      const data = await response.json();
      
      // Actualizar la interfaz
      document.getElementById('visit-count').textContent = `Visitas hoy: ${data.count}`;
      
    } catch (error) {
      console.error('Error:', error);
      // Si falla, intentar con la ruta de desarrollo
      try {
        const devResponse = await fetch('/api/visits', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        const devData = await devResponse.json();
        document.getElementById('visit-count').textContent = `Visitas hoy: ${devData.count}`;
      } catch (devError) {
        console.error('Error en ruta de desarrollo:', devError);
        document.getElementById('visit-count').textContent = 'Visitas: Error';
      }
    }
  }
  
  // Función para obtener solo el contador sin registrar una nueva visita
  async function getVisitCount() {
    try {
      const response = await fetch('/.netlify/functions/visits');
      if (!response.ok) throw new Error('Error al obtener las visitas');
      
      const data = await response.json();
      document.getElementById('visit-count').textContent = `Visitas hoy: ${data.count}`;
      
    } catch (error) {
      console.error('Error:', error);
      // Si falla, intentar con la ruta de desarrollo
      try {
        const devResponse = await fetch('/api/visits');
        const devData = await devResponse.json();
        document.getElementById('visit-count').textContent = `Visitas hoy: ${devData.count}`;
      } catch (devError) {
        console.error('Error en ruta de desarrollo:', devError);
        document.getElementById('visit-count').textContent = 'Visitas: Error';
      }
    }
  }
  
  // Usar sessionStorage para evitar múltiples conteos en la misma sesión
  function isNewSession() {
    const sessionKey = 'tigreAceroSession';
    const hasSession = sessionStorage.getItem(sessionKey);
    
    if (!hasSession) {
      sessionStorage.setItem(sessionKey, 'active');
      return true;
    }
    return false;
  }
  
  // Inicializar el contador cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    if (isNewSession()) {
      // Si es una nueva sesión, registrar visita
      updateVisitCounter();
    } else {
      // Si no, solo obtener el contador actual
      getVisitCount();
    }
  });
}
</script>

<style>
/* Estilos responsivos */
@media (max-width: 640px) {
  #visit-counter {
    right: 0.5rem;
    bottom: 0.5rem;
    font-size: 0.75rem;
    padding: 0.5rem;
  }
}
</style>
